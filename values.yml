# Depending on which DNS solution you have installed in your cluster enable the right exporter
coreDns:
  enabled: true

kubeDns:
  enabled: true

kubeScheduler:
  enabled: false


kubeControllerManager:
  enabled: false

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverError: true
    kubeApiserverSlos: true
    kubelet: true
    kubePrometheusGeneral: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    prometheus: true
    prometheusOperator: true
    time: true

# Exemplo de criação de uma regra customizada

# additionalPrometheusRulesMap:
#   rule-name:
#     groups:
#     - name: custom-alerts
#       rules:
#       - alert: teste-integracao
#         expr: min_over_time(prometheus_operator_syncs{job="prometheus-kube-prometheus-operator",namespace="monitoring",status="failed"}[5m]) == 0
#         for: 1m
#         labels: 
#           severity: critical


alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
      smtp_smarthost: 'your_smtp_smarthost:587'
      smtp_from: 'your_smtp_from'
      smtp_auth_username: 'your_smtp_user'
      smtp_auth_password: 'your_smtp_pass'
    templates:
    - '/etc/alertmanager/template/*.tmpl'
    route:
     group_by: ['alertname', 'cluster', 'service']
     group_wait: 30s
     group_interval: 5m
     repeat_interval: 1h
     receiver: general
     routes:
     - receiver: 'null'
       match:
         alertname: Watchdog     
     - receiver: blackhole
       match:
         severity: warning #defina a severidade irá para o pager EX: warnig (ignora alertas de warning pra baixo)         
     - receiver: slack
       continue: true
     - receiver: general
    receivers:
    - name: slack
      slack_configs:
      - api_url: 'webhook'
        channel: '#channel'
        send_resolved: true
        icon_url: https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Kubernetes_logo_without_workmark.svg/220px-Kubernetes_logo_without_workmark.svg.png
        username: 'Cliente-Cluster-PRD'
        title: |-
          [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
          {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
            {{" "}}(
            {{- with .CommonLabels.Remove .GroupLabels.Names }}
              {{- range $index, $label := .SortedPairs -}}
                {{ if $index }}, {{ end }}
                {{- $label.Name }}="{{ $label.Value -}}"
              {{- end }}
            {{- end -}}
            )
          {{- end }}
        text: >-
          {{ with index .Alerts 0 -}}
            :chart_with_upwards_trend: *<{{ .GeneratorURL }}|Graph>*
            {{- if .Annotations.runbook }}   :notebook: *<{{ .Annotations.runbook }}|Runbook>*{{ end }}
          {{ end }}

          *Alert details*:

          {{ range .Alerts -}}
            *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
          *Description:* {{ .Annotations.description }}
          *Details:*
            {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}        
      pagerduty_configs:
      - service_key: pagerdutykey
      email_configs:
      - to: 'your_alert_email_address'
        send_resolved: true             
    - name: blackhole
    - name: 'null'
    - name: general
  
  alertmanagerSpec:
    replicas: 2
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2      
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi

prometheus:
  prometheusSpec:
    serviceMonitorNamespaceSelector: {}
    retention: 15d
    replicas: 2
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2     
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 25Gi
 
  service:
      type: LoadBalancer
      port: 9090
      targetPort: 9090
      annotations: {}
      labels: {}

grafana:
  enabled: true
  adminUser: admin
  adminPassword: senha

  persistence:
    storageClassName: gp2      
    enabled: true
    accessModes: ["ReadWriteOnce"]
    size: 1Gi

  service:
    type: LoadBalancer
    port: 3000
    targetPort: 3000
    annotations: {}
    labels: {}